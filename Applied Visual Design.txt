z-index: serve para escolher quem tem prioridade na sobreposição, no caso a classe .first foi 
adicionado o z-index: 2; que é maior que a .second, a sobrepondo-o

<style>
  div {
    width: 60%;
    height: 200px;
    margin-top: 20px;
  }

  .first {
    z-index: 2;
    background-color: red;
    position: absolute;

  }
  .second {
    background-color: blue;
    position: absolute;
    left: 40px;
    top: 50px;
    z-index: 1;
  }
</style>

<div class="first"></div>
<div class="second"></div>

margin: auto - centraliza um elemento

<style>
  div {
    background-color: blue;
    height: 100px;
    width: 100px;
    margin: auto;
  }
</style>
<div></div>

element on hover - faz algo quando o mouse está sob o elemento
por exemplo aqui embaixo, aplicando a regra :hover em div { }, faz o mesmo aumentar de tamanho
pois o transform: scale() aumenta a escala, no caso em 1.1x
<style>
  div {
    width: 70%;
    height: 100px;
    margin:  50px auto;
    background: linear-gradient(
      53deg,
      #ccfffc,
      #ffcccf
    );
  }
  
  div:hover {
	transform: scale(1.1);
  }


</style>

<div></div>


transform property: skewX
skewX vai alterar o elemento em si, no caso o X dele (horizontal)
podendo alterar o ângulo em determinados graus (no caso 24)
<style>
  div {
    width: 70%;
    height: 100px;
    margin:  50px auto;
  }
  #top {
    background-color: red;
  }
  #bottom {
    background-color: blue;
    transform: skewX(24deg);

  }
</style>

<div id="top"></div>
<div id="bottom"></div>


aqui um exemplo de skewY, que altera o ângulo vertical do elemento
<style>
  div {
    width: 70%;
    height: 100px;
    margin: 50px auto;
  }
  #top {
    background-color: red;
    transform: skewY(-10deg);

  }
  #bottom {
    background-color: blue;
    transform: skewX(24deg);
  }
</style>

<div id="top"></div>
<div id="bottom"></div>

how to create an moon using CSS
aqui foi criado um elemento em formato de lua
tive que mexer em box-shadow que altera a sombra, e em border radius para 50%
que arredondou o elemento, em box shadow vem a seguinte sequência:
offset-x, the offset-y, blur-radius to 0, spread-radius to 0, and color to blue
<style>
  .center {
    position: absolute;
    margin: auto;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: 100px;
    height: 100px;
    background-color: transparent;
    border-radius: 50%;
    box-shadow: 25px 10px 0px 0px blue;
  }

</style>
<div class="center"></div>


::before and ::after pseudo-elements
::before - primeiro filho do elemento
::after - último filho do elemento
são dois pseudo-elementos que trabalham juntos, no caso aqui foi criado um coração rosa
para funcionarem, tem de ter a propriedade "content" com uma string vazia ""
<style>
  .heart {
    position: absolute;
    margin: auto;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: pink;
    height: 50px;
    width: 50px;
    transform: rotate(-45deg);
  }
  .heart::after {
    background-color: pink;
    content: "";
    border-radius: 50%;
    position: absolute;
    width: 50px;
    height: 50px;
    top: 0px;
    left: 25px;
  }
  .heart::before {
    content: "";
    background-color: pink;
    border-radius: 50%;
    position: absolute;
    width: 50px;
    height: 50px;
    top: -25px;
    left: 0px;
  }
</style>
<div class="heart"></div>


hoje aprendendo a animar algo utlizando puro css
bom para animar é necessário utilizar propriedades, que dirão o que a animação irá fazer,
e as keyframes, que dirão o que acontece durante a animação
<style>
  div {
    height: 40px;
    width: 70%;
    background: black;
    margin: 50px auto;
    border-radius: 5px;
  }

  #rect {
    animation-name: rainbow; <!-- aqui damoos nome e duração à animação -->
    animation-duration: 4s;

  }

  @keyframes rainbow { <!-- aqui é o que acontecerádurante, no caso, quando começa (0%)
a cor do fundo será azul, indo para verde, e finalizando em amarelo -->
    0% {
      background-color: blue;
    }
    50% {
      background-color: green;
    }
    100% {
      background-color: yellow;
    }
  }


</style>
<div id="rect"></div>

através do iteration count, escolhemos quantas vezes a animaçãpo se repetirá, podendo ser 
infinite também

animation-iteration-count: 3;---------

accesskey=""
adiciona-se a botões input, buttons, anchors

como adicionar o foco ao alguem pressionar tab?
tabindex="0"
exemplo abaixo onde tornamos um paragraph em foco ao pressionar tab
      <p tabindex="0">Instructions: Fill in ALL your information then click <b>Submit</b></p>

o número em tabindex fala sobre a ordem de prioridade, começando em 1 e seguindo
exemplo
<div tabindex="1">I get keyboard focus, and I get it first!</div>
<div tabindex="2">I get keyboard focus, and I get it second!</div>


DESIGN RESPONSIVO::


dá para aplicar uma rule (regra) para determinado elemento obedecer a uma ordem css
@media (max-width: 100px) { /* CSS Rules */ }

@media (max-height: 800px){
  p {
    font-size: 10px;
  }
}

nesse caso aqui foi dito que quando a altura do dispositivo for menor ou igual a
800px então o tamanho da parada (no caso o elemento p) deverá ser de 10px


tornar uma imagem responsiva com css basta aplicar essas propriedades a uma imagem
(que fica em style, podendo ser vinculada por meio de class (.responsive) ou id (#responsive)

img {
  max-width: 100%;
  height: auto;
}

max width 100% vai sempre deixar a largura nos 100% de qualquer dispositivo
já height auto sempre obedecerá a proporção da imagem


é recomendado para que a imagem fique com mais PPI que seja diminuída o tamanho dela
de preferência para a metade da mesma

exemplo
<style>
  img { height: 250px; width: 250px; }
</style>
<img src="coolPic500x500" alt="A most excellent picture">